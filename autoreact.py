__version__ = (0, 1, 25)


# ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÑ ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ
# ‚ñà‚ñÄ‚ñà ‚ñà ‚ñÄ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà ‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà   ‚ñà ‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà ‚ñÑ‚ñà
#
#           ¬© Copyright 2022
#
#        developed by @anon97945
#
#     https://t.me/apodiktum_modules
#      https://github.com/anon97945
#
# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/gpl-3.0.html

# meta developer: @apodiktum_modules
# meta banner: https://t.me/file_dumbster/11
# meta pic: https://t.me/file_dumbster/13

# scope: hikka_only
# scope: hikka_min 1.3.0

import asyncio
import logging
import random

from telethon.errors import ReactionInvalidError
from telethon.tl.types import Message

from .. import loader, utils

logger = logging.getLogger(__name__)


@loader.tds
class ApodiktumAutoReactMod(loader.Module):
    """
    AutoReact to messages.
    Check the `.config apodiktum autoreact`
    """

    strings = {
        "name": "Apo-AutoReact",
        "developer": "@anon97945",
        "_cfg_cst_auto_migrate": "Wheather to auto migrate defined changes on startup.",
        "_cfg_doc_delay": "The delay between reactions are send in seconds.",
        "_cfg_doc_delay_chats": (
            "List of delay chats.\nIf the chat is in the list, the delay is used."
        ),
        "_cfg_doc_ignore_self": "Do not react to messages from yourself.",
        "_cfg_doc_raise_error": "Raise an error if the emoji is not valid.",
        "_cfg_doc_random_delay": (
            "Randomizes the delay between reactions. Randomness is between 0"
            " and the global delay."
        ),
        "_cfg_doc_random_delay_chats": (
            "List of random delay chats.\nIf the chat is in the list, a random"
            " delay is used."
        ),
        "_cfg_doc_reactions": (
            "Setup AutoReact.\nYou can define alternative emojis to react with, when"
            " the Chat doesn't allow the first, second etc.\nYou can also define an all"
            " OR global state, which will either apply reactions to all chat members"
            " (all) or to one user in all groups(global).\nYou can't use both at the"
            " same time! Does also work for channels! You need to use"
            " ALL!\n\nPattern:\n<userid/all>|<chatid/global>|<emoji1>|<emoji2>|<emoji3>...\n\nExample:\nall|1792410946|‚ù§Ô∏è|üëç|üî•\nFor"
            " Channels:\nall|<channelid>|‚ù§Ô∏è|üëç|üî•"
        ),
        "_cfg_doc_reactions_chance": (
            "The chance of reacting to a message.\n0.0 is the chance of not"
            " reacting to"
            " a message.\n1.0 is the chance of reacting to a message every"
            " time."
            "Pattern:\n<userid/all>|<chatid/global>|<percentage(0.00-1)>\n\nExample:\n1234567|global|0.8"
        ),
        "_cfg_doc_shuffle_chats": "A list of chats where the emoji list is shuffled.",
    }

    strings_en = {}

    strings_de = {}

    strings_ru = {
        "_cfg_doc_delay": "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
        "_cfg_doc_delay_chats": (
            "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n–ï—Å–ª–∏ —á–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ"
            " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞."
        ),
        "_cfg_doc_ignore_self": "–ù–µ —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "_cfg_doc_raise_error": "–í—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π.",
        "_cfg_doc_random_delay": (
            "–°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–∑–º–µ–Ω—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"
            " –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏."
        ),
        "_cfg_doc_random_delay_chats": (
            "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å–æ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.\n–ï—Å–ª–∏ —á–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ,"
            " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞."
        ),
        "_cfg_doc_reactions": (
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏–∏.\n–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è"
            " —Ä–µ–∞–∫—Ü–∏–π. –ë—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤ —á–∞—Ç–µ\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
            " —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ(all) –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ(global) –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–µ–∞–∫—Ü–∏—é"
            " –ª–∏–±–æ –∫–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞ (–≤—Å–µ), –ª–∏–±–æ –∫ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ –≤—Å–µ—Ö"
            " –≥—Ä—É–ø–ø–∞—Ö (–≥–ª–æ–±–∞–ª—å–Ω–æ–µ).\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
            " –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ! –≠—Ç–æ —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤! –í–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
            " ALL!\n\n–§–æ—Ä–º–∞—Ç:\n<userid/all>|<chatid/global>|<emoji1>|<emoji2>|<emoji3>...\n\n–ü—Ä–∏–º–µ—Ä:\nall|1792410946|‚ù§Ô∏è|üëç|üî•\n–î–ª—è"
            " –∫–∞–Ω–∞–ª–æ–≤:\nall|<channelid>|‚ù§Ô∏è|üëç|üî•"
        ),
        "_cfg_doc_reactions_chance": (
            "–®–∞–Ω—Å —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n0.0 - –≤—Å–µ–≥–¥–∞ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞"
            " —Å–æ–æ–±—â–µ–Ω–∏–µ.\n1.0 -"
            " –≤—Å–µ–≥–¥–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            "–§–æ—Ä–º–∞—Ç:\n<userid/all>|<chatid/global>|<percentage(0.00-1)>\n\n–ü—Ä–∏–º–µ—Ä:\n1234567|global|0.8"
        ),
        "_cfg_doc_shuffle_chats": (
            "–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏."
        ),
        "_cls_doc": "–ê–≤—Ç–æ—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .config apodiktum autoreact.",
        "_cmd_doc_cautoreact": "–≠—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –º–æ–¥—É–ª—è.",
    }

    all_strings = {
        "strings": strings,
        "strings_en": strings,
        "strings_de": strings_de,
        "strings_ru": strings_ru,
    }

    changes = {
        "migration1": {
            "name": {
                "old": "Apo AutoReact",
                "new": "Apo-AutoReact",
            },
        },
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "reaction_active",
                True,
                doc=lambda: self.strings("_cfg_doc_react"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "delay",
                0.5,
                doc=lambda: self.strings("_cfg_doc_delay"),
                validator=loader.validators.Union(
                    loader.validators.Float(minimum=0, maximum=600),
                    loader.validators.NoneType(),
                ),
            ),
            loader.ConfigValue(
                "delay_chats",
                doc=lambda: self.strings("_cfg_doc_delay_chats"),
                validator=loader.validators.Series(
                    loader.validators.TelegramID(),
                ),
            ),
            loader.ConfigValue(
                "ignore_self",
                False,
                doc=lambda: self.strings("_cfg_doc_ignore_self"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "raise_error",
                False,
                doc=lambda: self.strings("_cfg_doc_raise_error"),
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "random_delay_chats",
                doc=lambda: self.strings("_cfg_doc_random_delay_chats"),
                validator=loader.validators.Series(
                    loader.validators.TelegramID(),
                ),
            ),
            loader.ConfigValue(
                "reactions",
                ["all|1792410946|‚ù§Ô∏è|üëç|üî•"],
                doc=lambda: self.strings("_cfg_doc_reactions"),
                validator=loader.validators.Series(
                    validator=loader.validators.RegExp(
                        r"^(?:(?:\d+)[|](?:\d+|global)|(?:\d+|all)[|]\d+)(?:[|][üëçüëé‚ù§Ô∏èüî•ü•∞üëèüòÅü§îü§Øüò±ü§¨üò¢üéâü§©ü§Æüí©üôèüëåüïäü§°ü•±ü•¥üòçüê≥üåöüå≠üíØü§£‚ù§Ô∏è‚Äçüî•]|[|][\u2764])+"
                    )
                ),
            ),
            loader.ConfigValue(
                "reactions_chance",
                doc=lambda: self.strings("_cfg_doc_reactions_chance"),
                validator=loader.validators.Series(
                    validator=loader.validators.RegExp(
                        r"^(?:(?:\d+)[|](?:\d+|global)|(?:\d+|all)[|]\d+)(?:[|](?:0(?:\.\d{1,2})?|1(?:\.0{1,2})?))$"
                    )
                ),
            ),
            loader.ConfigValue(
                "shuffle_reactions",
                doc=lambda: self.strings("_cfg_doc_shuffle_chats"),
                validator=loader.validators.Series(
                    loader.validators.TelegramID(),
                ),
            ),
            loader.ConfigValue(
                "auto_migrate",
                True,
                doc=lambda: self.strings("_cfg_cst_auto_migrate"),
                validator=loader.validators.Boolean(),
            ),  # for MigratorClass
        )

    async def client_ready(self):
        self.apo_lib = await self.import_lib(
            "https://raw.githubusercontent.com/anon97945/hikka-libs/master/apodiktum_library.py",
            suspend_on_error=True,
        )
        self.apo_lib.apodiktum_module()
        await self.apo_lib.migrator.auto_migrate_handler(
            self.__class__.__name__,
            self.strings("name"),
            self.changes,
            self.config["auto_migrate"],
        )

    async def cautoreactcmd(self, message: Message):
        """
        This will open the config for the module.
        """
        name = self.strings("name")
        await self.allmodules.commands["config"](
            await utils.answer(message, f"{self.get_prefix()}config {name}")
        )

    @loader.watcher("only_messages")
    async def watcher(self, message: Message):
        if not self.config["reaction_active"]:
            return
        reactions = self.config["reactions"]
        reactions_chance = self.config["reactions_chance"]

        for reaction in reactions:
            userid, chatid, *emoji_list = reaction.split("|")
            if userid == "all" and chatid == "global":
                return
            if (
                (str(message.sender_id) == userid or userid == "all")
                and (str(utils.get_chat_id(message)) == chatid or chatid == "global")
                and not (userid == "all" and self.config["ignore_self"] and message.out)
            ):
                if not await self._reactions_chance(reactions_chance, message):
                    return
                if utils.get_chat_id(message) in self.config["shuffle_reactions"]:
                    emoji_list = random.sample(emoji_list, len(emoji_list))
                await self._delay(chatid, userid)
                for emoji_reaction in emoji_list:
                    if await self._react_message(message, emoji_reaction, chatid):
                        return

    async def _delay(self, chatid, userid):
        if chatid != "global":
            chatid = int(chatid)
        if userid != "all":
            userid = int(userid)
        if (
            chatid in self.config["delay_chats"]
            or userid in self.config["delay_chats"]
            or chatid in self.config["random_delay_chats"]
            or userid in self.config["random_delay_chats"]
        ):
            if (
                chatid not in self.config["random_delay_chats"]
                or userid not in self.config["random_delay_chats"]
            ):
                await asyncio.sleep(self.config["delay"])
            else:
                await asyncio.sleep(round(random.uniform(0, self.config["delay"]), 2))

    @staticmethod
    async def _reactions_chance(reactions_chance: list, message: Message) -> bool:
        for r_chance in reactions_chance:
            userid, chatid, chance = r_chance.split("|")
            if userid == "all" and chatid == "global":
                return False
            if (
                (str(message.sender_id) == userid or userid == "all")
                and (str(utils.get_chat_id(message)) == chatid or chatid == "global")
                and random.random() > float(chance)
            ):
                return False
        return True

    async def _react_message(
        self,
        message: Message,
        emoji_reaction: str,
        chatid: int,
    ) -> bool:
        try:
            await message.react(emoji_reaction)
            return True
        except ReactionInvalidError:
            if self.config["raise_error"]:
                logger.info(f"ReactionInvalidError: {emoji_reaction} in chat {chatid}")
            return False
        except Exception as exc:  # skipcq: PYL-W0703
            if self.config["raise_error"]:
                if "PREMIUM_ACCOUNT_REQUIRED" in str(exc):
                    logger.info(
                        f"PREMIUM_ACCOUNT_REQUIRED: {emoji_reaction} in chat {chatid}"
                    )
                else:
                    logger.info(f"Error: {exc}")
            return False
